package com.cb.passwdbox.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cb.passwdbox.greendao.model.Password;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PASSWORD".
*/
public class PasswordDao extends AbstractDao<Password, String> {

    public static final String TABLENAME = "PASSWORD";

    /**
     * Properties of entity Password.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Passwd = new Property(2, String.class, "passwd", false, "PASSWD");
        public final static Property TypeId = new Property(3, String.class, "typeId", false, "TYPE_ID");
    }


    public PasswordDao(DaoConfig config) {
        super(config);
    }
    
    public PasswordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PASSWORD\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"PASSWD\" TEXT NOT NULL ," + // 2: passwd
                "\"TYPE_ID\" TEXT);"); // 3: typeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PASSWORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Password entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getPasswd());
 
        String typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindString(4, typeId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Password entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getPasswd());
 
        String typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindString(4, typeId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Password readEntity(Cursor cursor, int offset) {
        Password entity = new Password( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // passwd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // typeId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Password entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setPasswd(cursor.getString(offset + 2));
        entity.setTypeId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Password entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Password entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Password entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
